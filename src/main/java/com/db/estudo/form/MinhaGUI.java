package com.db.estudo.form;

import com.db.estudo.EstudoApplication;
import com.db.estudo.model.Pessoa;
import com.db.estudo.repositorio.RepositorioGenericException;
import com.db.estudo.repositorio.RepositorioPessoa;
import com.db.estudo.util.Util;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Component;

import javax.swing.*;
import javax.swing.plaf.FontUIResource;
import javax.swing.text.StyleContext;
import java.awt.*;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.util.List;
import java.util.Locale;
import java.util.stream.Collectors;

@Component
public class MinhaGUI extends JFrame {

    private static final Logger log = LoggerFactory.getLogger(EstudoApplication.class);

    private JPanel meuJPanel;
    private JTextField nomeTextFild;
    private JTextField idadeTextFild;
    private JButton cadastroButton;
    private JList<String> pessoasList;
    private JButton atualizarButton;

    private final RepositorioPessoa repositorioPessoa;

    public MinhaGUI(@Qualifier("sqlite") RepositorioPessoa repositorioPessoa) {
        super("Cadastro Pessoa"); // titulo da janela
        this.repositorioPessoa = repositorioPessoa;
        log.debug("Criando Bean MinhaGUI");

        this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        this.setContentPane(meuJPanel);
        this.pack();

        // Init
        preencherListaPessoas();

        // clique no botao atualizarButton
        atualizarButton.addActionListener(e -> preencherListaPessoas());

        // Clique no botao cadastrar
        cadastroButton.addActionListener(e -> {
            log.debug("Botão clicado");

            String nome = nomeTextFild.getText();
            final int idade = Integer.parseInt(idadeTextFild.getText());
            log.info("Nome: {}, Idade: {}", nome, idade);

            try {
                repositorioPessoa.cadastrarPessoa(nome, idade);
                log.info("Sucesso! Pessoa cadastrada.");
                preencherListaPessoas();
            } catch (RepositorioGenericException exception) {
                /*TODO ignora*/
            }
        });

        // Tecla presionada no idadeTextFild
        idadeTextFild.addKeyListener(new KeyAdapter() {
            @Override
            public void keyTyped(KeyEvent e) {
                super.keyTyped(e);

                if (!Util.charIsNumber(e.getKeyChar())) {
                    log.debug("O character {} não é um número.", e.getKeyChar());
                    e.consume();
                    return;
                }

                log.debug("Character válido: {}", e.getKeyChar());
            }
        });
    }

    private void preencherListaPessoas() {
        try {
            final List<Pessoa> pessoas = repositorioPessoa.buscarTodasPessoas();
            String[] strings = pessoas.stream()
                    .map(pessoa -> pessoa.getNome() + ", " + pessoa.getIdade() + " anos")
                    .collect(Collectors.toList())
                    .toArray(new String[]{});
            pessoasList.setListData(strings);
        } catch (RepositorioGenericException exception) {
            /*TODO ignora*/
        }
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        meuJPanel = new JPanel();
        meuJPanel.setLayout(new GridLayoutManager(7, 5, new Insets(10, 10, 10, 10), -1, -1));
        final JLabel label1 = new JLabel();
        label1.setText("Nome");
        meuJPanel.add(label1, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label2 = new JLabel();
        label2.setText("Idade");
        meuJPanel.add(label2, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        nomeTextFild = new JTextField();
        meuJPanel.add(nomeTextFild, new GridConstraints(1, 1, 1, 4, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        idadeTextFild = new JTextField();
        idadeTextFild.setEnabled(true);
        meuJPanel.add(idadeTextFild, new GridConstraints(2, 1, 1, 4, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        cadastroButton = new JButton();
        cadastroButton.setText("cadastrar");
        meuJPanel.add(cadastroButton, new GridConstraints(3, 0, 1, 5, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label3 = new JLabel();
        Font label3Font = this.$$$getFont$$$(null, -1, 22, label3.getFont());
        if (label3Font != null) label3.setFont(label3Font);
        label3.setText("Cadastro Pessoa");
        meuJPanel.add(label3, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        meuJPanel.add(spacer1, new GridConstraints(0, 3, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        final Spacer spacer2 = new Spacer();
        meuJPanel.add(spacer2, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        pessoasList = new JList();
        meuJPanel.add(pessoasList, new GridConstraints(6, 0, 1, 5, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(150, 50), null, 0, false));
        atualizarButton = new JButton();
        atualizarButton.setText("Atualizar lista");
        meuJPanel.add(atualizarButton, new GridConstraints(4, 0, 1, 5, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label4 = new JLabel();
        label4.setEnabled(true);
        Font label4Font = this.$$$getFont$$$(null, -1, 18, label4.getFont());
        if (label4Font != null) label4.setFont(label4Font);
        label4.setText("Pessoas Cadastrada");
        meuJPanel.add(label4, new GridConstraints(5, 0, 1, 5, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        Font font = new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
        boolean isMac = System.getProperty("os.name", "").toLowerCase(Locale.ENGLISH).startsWith("mac");
        Font fontWithFallback = isMac ? new Font(font.getFamily(), font.getStyle(), font.getSize()) : new StyleContext().getFont(font.getFamily(), font.getStyle(), font.getSize());
        return fontWithFallback instanceof FontUIResource ? fontWithFallback : new FontUIResource(fontWithFallback);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return meuJPanel;
    }

}
